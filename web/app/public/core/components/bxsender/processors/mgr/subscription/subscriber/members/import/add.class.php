<?php
include_once dirname(dirname(dirname(__FILE__))) . '/trait.class.php';

class bxSubscriberMembersAddProcessor extends modProcessor
{
    use bxSubscriberTrait;

    /** @var bxSender $bxSender */
    public $bxSender = null;

    public function initialize()
    {

        $this->bxSender = $this->modx->getService('bxSender');
        /** @var modProcessorResponse $response */

        $this->modx->lexicon->load('bxsender:subscription');

        $segments = $this->getProperty('segments');

        foreach ($segments as $segment) {
            if (!$count = (boolean)$this->modx->getCount('bxSegment', $segment)) {
                return $this->modx->lexicon('bxsender_subscriber_loader_failure_segment_id');
            }
        }

        return parent::initialize(); // TODO: Change the autogenerated stub
    }


    /**
     * @return array|string
     */
    public function process()
    {

        $array = $this->parserString();
        $array = $this->getUsers($array);
        $array = $this->getUsersGroups($array);
        $array = $this->getSendexSubscribe($array);


        $segments = $this->getProperty('segments');
        $replace_fullname = $this->setCheckbox('replace_fullname');
        $replace_user_id = $this->setCheckbox('replace_user_id');
        $search_user = $this->setCheckbox('search_user');
        $newSubscribeTotal = $this->addSubscribers($array, $segments, $replace_fullname, $replace_user_id, $search_user);
        return $this->success($this->modx->lexicon('bxsender_subscriber_loader_success'), array('total' => $newSubscribeTotal));
    }

    /**
     * Вернет всех пользователей подписаных на тему
     */
    public function getSendexSubscribe($array)
    {
        $of_sendex = (int)$this->getProperty('of_sendex');
        if (!empty($of_sendex)) {
            $this->modx->getService('sendex', 'Sendex', MODX_CORE_PATH . 'components/sendex/model/sendex/');
            $q = $this->modx->newQuery('sxSubscriber');
            $q->select('sxSubscriber.user_id as user_id,sxSubscriber.email as email,Profile.fullname as fullname');
            $q->leftJoin('modUserProfile', 'Profile', 'Profile.internalKey = sxSubscriber.user_id');
            $q->where(array(
                'newsletter_id' => $of_sendex
            ));
            if ($q->prepare() && $q->stmt->execute()) {
                while ($row = $q->stmt->fetch(PDO::FETCH_ASSOC)) {
                    $array[] = $row;
                }
            }
        }
        return $array;
    }

    /**
     * Вернет всех пользователей
     * @param $array
     * @return array
     */
    public function getUsers($array)
    {
        if ($this->setCheckbox('of_users')) {
            $q = $this->modx->newQuery('modUserProfile');
            $q->select('internalKey as user_id,fullname,email');
            $q->groupby('email');

            $q->innerJoin('modUser', 'User', 'User.id = modUserProfile.internalKey');
            $q->where(array(
                'User.active' => 1,
            ));
            if ($q->prepare() && $q->stmt->execute()) {
                while ($row = $q->stmt->fetch(PDO::FETCH_ASSOC)) {
                    $rows[] = $row;
                }
            }

            if ($q->prepare() && $q->stmt->execute()) {
                while ($row = $q->stmt->fetch(PDO::FETCH_ASSOC)) {
                    $array[] = $row;
                }
            }
        }
        return $array;
    }


    /**
     * Добавление всех пользователей из группы
     */
    public function getUsersGroups($array)
    {
        $of_group = $this->getProperty('of_group');
        if (!empty($of_group)) {

            $q = $this->modx->newQuery('modUserProfile');
            $q->select('internalKey as user_id,fullname,email');
            $q->innerJoin('modUserGroupMember', 'UserGroupMembers', '`UserGroupMembers`.`member` = `modUserProfile`.`internalKey`');
            $q->where(array(
                'UserGroupMembers.user_group' => $of_group
            ));
            $q->groupby('modUserProfile.email');
            if ($q->prepare() && $q->stmt->execute()) {
                while ($row = $q->stmt->fetch(PDO::FETCH_ASSOC)) {
                    $array[] = $row;
                }
            }
        }

        return $array;
    }


    /**
     * Добавление подписчиков из строки
     * @return array
     */
    public function parserString()
    {
        $array = array();
        $listString = trim($this->getProperty('list'));
        if (!empty($listString)) {
            $list = explode(PHP_EOL, $listString);
            foreach ($list as $str) {
                $fullname = '';
                if (strripos($str, '<') === false) {
                    // Для адресов без имен
                    $email = trim($str);
                } else {
                    // Для адресов с именами
                    $arr = explode('<', $str);
                    $fullname = trim($arr[0]);
                    $email = str_ireplace('>', '', $arr[1]);
                }

                if (!empty($email)) {
                    $array[] = array(
                        'user_id' => 0,
                        'email' => $email,
                        'fullname' => $fullname,
                    );
                }
            }
        }
        return $array;
    }
}

return 'bxSubscriberMembersAddProcessor';