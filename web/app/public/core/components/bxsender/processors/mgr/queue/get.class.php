<?php
ini_set('display_errors', 1);
error_reporting(E_ALL);

/**
 * Get an Item
 */
class bxQueueGetProcessor extends modObjectGetProcessor
{
    /** @var array $languageTopics An array of language topics to load */
    public $languageTopics = array('bxsender:default', 'bxsender:queue');

    /* @var bxQueue $object */
    public $object;
    public $objectType = 'message';
    public $classKey = 'bxQueue';
    public $permission = 'bxqueue_view';

    public function initialize()
    {
        /* @var bxSender $bxSender */
        $bxSender = $this->modx->getService('bxsender', 'bxSender', MODX_CORE_PATH . 'components/bxsender/model/');
        return parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * We doing special check of permission
     * because of our objects is not an instances of modAccessibleObject
     *
     * @return mixed
     */
    public function process()
    {
        if (!$this->checkPermissions()) {
            return $this->failure($this->modx->lexicon('access_denied'));
        }

        return parent::process();
    }


    /**
     * Return the response
     * @return array
     */
    public function cleanup()
    {

        $array = $this->object->toArray();


        $array['subject'] = $this->object->get('reject_reason');
        $output = array();
        $fields = explode(',', 'state,reject_reason');
        $output[] = '<tr><td style="width: 150px; vertical-align: top; padding: 15px 5px" colspan="2"><h2>Основная информация</h2></td></tr>';


        foreach ($fields as $field) {
            $key = $this->object->get($field);
            $value = $this->object->get($field);
            switch ($field) {
                case 'reject_reason':
                    if (empty($key)) {
                        $key = $this->object->get('state');
                    }
                    $value = '<b>' . $this->modx->lexicon('bxsender_mandrill_state_' . $key) . '</b>';
                    $value .= '<br>' . $this->modx->lexicon('bxsender_mandrill_state_' . $key . '_desc');
                    break;
                default:
                    break;
            }
            $output[] = '<tr><td style="width: 150px; vertical-align: top; padding: 5px"><b>' . $field . '</b></td><td>' . $value . '</td></tr>';
        }


        $service_message = $this->object->get('service_message');
        if (!empty($service_message)) {

            if (!empty($service_message['error'])) {
                $output[] = '<tr><td style="width: 150px; vertical-align: top; padding: 15px 5px" colspan="2"><h2>Полное сообщение</h2></td></tr>';
                foreach ($service_message as $field => $val) {
                    if (is_array($val)) {
                        if (!empty($val)) {
                            $val = print_r($val, 1);
                        } else {
                            $val = '';
                        }
                    }
                    $output[] = '<tr><td style="width: 150px; vertical-align: top; padding: 5px"><b>' . $field . '</b></td><td>' . $val . '</td></tr>';
                }
            }
        }


        $isAdd = true;
        $composites = array('StatOpens', 'StatClicks', 'StatUnSubscribed', 'StatUnDeliverable');
        foreach ($composites as $composite) {
            if ($Stat = $this->object->getOne($composite)) {
                if ($isAdd) {
                    $isAdd = false;
                    $output[] = '<tr><td style="width: 150px; vertical-align: top; padding: 15px 5px" colspan="2"><h2>Статистика</h2></td></tr>';
                }

                #$val = $this->modx->lexicon('bxsender_queue_stat_empty');
                $name = $this->modx->lexicon('bxsender_queue_stat_' . $composite);
                switch ($composite) {
                    case 'StatClicks':
                        $val = $Stat->get('count');
                        break;
                    default:
                        $val = $Stat->get('createdon');
                        break;
                }
                $output[] = '<tr><td style="width: 200px; vertical-align: top; padding: 5px"><b>' . $name . '</b></td><td>' . $val . '</td></tr>';
            }
        }


        $response = $this->getErrorUnDelivery();
        if ($response !== false) {
            $output[] = '<tr><td style="width: 150px; vertical-align: top; padding: 15px 5px" colspan="2"><h2>Ошибка доставкии сообщения</h2></td></tr>';
            $output = array_merge($output, $response);
        }

        $array['output'] = '<table style="vertical-align: top">' . implode('', $output) . '</table><br><br>';

        return $this->success('', $array);
    }

    /**
     * @return array|bool
     */
    public function getErrorUnDelivery()
    {
        $output = false;
        if ($UnDeliverable = $this->object->loadUnDeliverable(true) or $UnDeliverable = $this->object->loadUnDeliverableEmail(true)) {
            $output = array();
            $fields = $UnDeliverable->get(array('subject', 'cat', 'type', 'action', 'status', 'createdon'));
            foreach ($fields as $field => $value) {
                $output[] = '<tr><td style="width: 150px; vertical-align: top; padding: 5px"><b>' . $field . '</b></td><td>' . $value . '</td></tr>';
            }
        }
        return $output;
    }


}

return 'bxQueueGetProcessor';