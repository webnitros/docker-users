<?php

/**
 * Get a list of Mailings
 */
class bxMailingGetListProcessor extends modObjectGetListProcessor
{
    /* @var bxSender $bxSender */
    public $bxSender;
    public $objectType = 'bxMailing';
    public $classKey = 'bxMailing';
    public $defaultSortField = 'id';
    public $defaultSortDirection = 'DESC';
    public $languageTopics = array('bxsender:manager', 'bxsender:subscription', 'bxsender:mailing');

    public function initialize()
    {

        /** @var bxSender $bxSender */
        $this->bxSender = $this->modx->getService('bxSender');
        return parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * @param xPDOQuery $c
     *
     * @return xPDOQuery
     */
    public function prepareQueryBeforeCount(xPDOQuery $c)
    {
        $c->select($this->modx->getSelectColumns($this->classKey, $this->classKey));
        #$c->leftJoin('bxMailingMember', 'Members');
        #$c->select('COUNT(`Members`.`mailing_id`) as `segment_count`');

        if (!$this->setCheckbox('combo')) {
            $c->select("(SELECT COUNT(DISTINCT Queue.subscriber_id) FROM {$this->modx->getTableName('bxQueue')} as Queue WHERE Queue.mailing_id = bxMailing.id AND completed = 1) as subscribers_sent");
            $c->groupby('bxMailing.id');


            $active = $this->setCheckbox('active');
            if ($active) {
                $c->where(array('active' => 1));
            }
        }

        if ($query = $this->getProperty('query')) {
            $c->where(array(
                'subject:LIKE' => "%$query%",
            ));
        }

        return $c;
    }


    /**
     * @param xPDOObject $object
     *
     * @return array
     */
    public function prepareRow(xPDOObject $object)
    {
        /* @var bxMailing $object */
        $array = $object->toArray();
        $array['actions'] = array();


        if (!$this->setCheckbox('combo')) {

            /*  // Получаем контент по URL чтобы не вызвать ошибку PHP
              $opts = array('http' => array('header' => 'Cookie: ' . $_SERVER['HTTP_COOKIE'] . "\r\n"));
              $context = stream_context_create($opts);
              $url = $this->modx->getOption('site_url') . ltrim($this->bxSender->config['openbrowserUrl'], '/') . '?mailing_id=' . $object->get('id');
              $content = file_get_contents($url, false, $context);
              $array['message'] = $content;*/

            $array['message'] = $object->parserMessage();


            if ($array['shipping_status'] == 'draft') {
                $array['subscribers_count'] = $object->getCountSubscribers();
            } else {
                $array['subscribers_count'] = $object->getCountQueue();
            }


            if ($object->isServiceBx()) {
                $status = $object->get('shipping_status');
                switch ($status) {
                    case 'draft':
                        $array['actions'][] = array(
                            'class' => '',
                            'button' => true,
                            'menu' => true,
                            'action' => 'statusProcess',
                            'icon' => 'icon icon-play',
                            'title' => $this->modx->lexicon('bxsender_action_process'),
                        );
                        break;
                    case 'process':
                        $array['actions'][] = array(
                            'class' => '',
                            'button' => true,
                            'menu' => true,
                            'action' => 'statusPaused',
                            'icon' => 'icon icon-stop',
                            'title' => $this->modx->lexicon('bxsender_action_paused'),
                        );
                        break;
                    case 'completed':
                        break;
                    case 'paused':
                        $array['actions'][] = array(
                            'class' => '',
                            'button' => true,
                            'menu' => true,
                            'action' => 'statusProcess',
                            'icon' => 'icon icon-play',
                            'title' => $this->modx->lexicon('bxsender_action_process'),
                        );
                        break;
                    default:
                        break;
                }


            }


            // Update
            $array['actions'][] = array(
                'class' => '',
                'button' => true,
                'menu' => true,
                'action' => 'update',
                'icon' => 'icon icon-edit',
                'title' => $this->modx->lexicon('bxsender_action_update'),
            );

            // Disable
            if (empty($array['active'])) {
                $array['actions'][] = array(
                    'class' => '',
                    'button' => false,
                    'menu' => true,

                    'action' => 'enable',
                    'icon' => 'icon icon-check',
                    'title' => $this->modx->lexicon('bxsender_action_enable'),
                );
            } // or Enable
            else {
                $array['actions'][] = array(
                    'class' => '',
                    'button' => false,
                    'menu' => true,


                    'action' => 'disable',
                    'icon' => 'icon icon-power-off',
                    'title' => $this->modx->lexicon('bxsender_action_disable'),
                );
            }


            // copy
            $array['actions'][] = array(
                'class' => '',
                'button' => false,
                'menu' => true,
                'action' => 'copy',
                'icon' => 'icon icon-copy',
                'title' => $this->modx->lexicon('bxsender_action_copy'),
            );

            // Remove
            if (empty($array['active'])) {
                $array['actions'][] = array(
                    'class' => '',
                    'button' => false,
                    'menu' => true,
                    'action' => 'remove',
                    'icon' => 'icon icon-trash-o',
                    'title' => $this->modx->lexicon('bxsender_action_remove'),
                );
            }
        }
        return $array;
    }

}

return 'bxMailingGetListProcessor';