<?php
/**
 * Created by Andrey Stepanenko.
 * User: webnitros
 * Date: 19.03.2021
 * Time: 12:28
 */

use PHPUnit\Framework\AssertionFailedError;
use PHPUnit\Framework\TestCase;
use PHPUnit\Framework\TestResult;
use PHPUnit\Framework\Test;
use PHPUnit\Framework\Warning;
use SebastianBergmann\Diff\Differ;

class MODxTestResult extends TestResult
{
    /* @var CrontabPhpUnit $CronTab */
    public $CronTab = null;

    public function addFailure(Test $test, AssertionFailedError $e, $time)
    {
        $this->print_msg('failure', $test, $e, $time);
        parent::addFailure($test, $e, $time);
    }

    public function addWarning(Test $test, Warning $e, $time)
    {
        $this->print_msg('warning', $test, $e, $time);
        parent::addWarning($test, $e, $time); // TODO: Change the autogenerated stub
    }

    public function addError(Test $test, Throwable $e, $time)
    {
        $this->print_msg('error', $test, $e, $time);
        parent::addError($test, $e, $time); // TODO: Change the autogenerated stub
    }

    public function endTest(Test $test, $time)
    {
        if (!$this->lastTestFailed) {
            $this->print_msg('success', $test, '', $time);
        }
        parent::endTest($test, $time); // TODO: Change the autogenerated stub
    }

    /**
     * @param $type
     * @param Test $test
     * @param string|Exception $e
     * @param $time
     */
    public function print_msg($type, Test $test, $e, $time)
    {

        $msg = '';
        if ($e instanceof Exception || $e instanceof Throwable) {
            $msg = $e->getMessage();
        }


        /* @var $test TestCase */
        $class = \get_class($test);
        $name = $class . '::' . $test->getName();
        $icon = '';

        $disableSeparator = false;
        $msg = $test->getStatusMessage();
        switch ($type) {
            case 'failure':
            case 'warning':
                $icon = '✘';
                break;
            case 'error':
                $icon = '✘';
                $disableSeparator = true;
                break;
            case 'success':
                $icon = '✔';
                break;
            default:
                break;
        }

        if ($type === 'failure' || $type === 'error') {
            #SebastianBergmann\Comparator\ComparisonFailure
            /* @var $ComparisonFailure SebastianBergmann\Comparator\ComparisonFailure */

            if (method_exists($e, 'getComparisonFailure')) {
                $ComparisonFailure = $e->getComparisonFailure();
                if ($ComparisonFailure instanceof SebastianBergmann\Comparator\ComparisonFailure) {
                    $msg .= PHP_EOL;
                    $msg .= 'Ожидалось: ' . $ComparisonFailure->getExpected() . PHP_EOL;
                    $msg .= 'Вернулось: ' . $ComparisonFailure->getActual() . PHP_EOL;
                } else {
                    $disableSeparator = true;
                }
            } else {
                $disableSeparator = true;
            }
        }


        $time_str = round($time, 4) . ' сек.';
        $string = $icon . ' ' . $name . ' [' . $time_str . ']';
        $this->CronTab->print_msg($string);
        if (!empty($msg)) {
            if (!$disableSeparator) {
                $this->CronTab->print_msg($this->additionalFailureDescription($msg));
            } else {
                $msg .= PHP_EOL;
                $this->CronTab->print_msg('      | ' . $msg);
            }
        }
    }


    public function endTestSuite(\PHPUnit\Framework\TestSuite $suite)
    {
        parent::endTestSuite($suite); // TODO: Change the autogenerated stub
    }


    protected function additionalFailureDescription($other)
    {
        $to = \preg_split('(\r\n|\r|\n)', $other);
        $other = \implode("\n", $to);
        $differ = new Differ("");
        $out = $differ->diff('', $other);


        $out = str_ireplace('@@ @@', '', $out);
        $out = trim($out);
        $out = str_ireplace('+', '      | ', $out);


        return $out;
    }

}
